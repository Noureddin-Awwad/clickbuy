import 'package:e_commerce/featues/personalization/models/address_model.dart';
import 'package:e_commerce/utils/constants/image_strings.dart'; // For NImage.docerAnimation
import 'package:e_commerce/utils/network/network_manager.dart';
import 'package:e_commerce/utils/popups/full_screen_loader.dart'; // For NFullScreenLoader
import 'package:flutter/material.dart'; // Ensure Material is imported for GlobalKey, Navigator, etc.
import 'package:get/get.dart';

import '../../../common/widgets/loaders/loaders.dart'; // For NLoaders
import '../../../data/repositories/address/address_repository.dart';

class AddressController extends GetxController {
  static AddressController get instance => Get.find();

  // Text Editing Controllers for form fields
  final name = TextEditingController();
  final phoneNumber = TextEditingController();
  final street = TextEditingController();
  final postalCode = TextEditingController();
  final city = TextEditingController();
  final state = TextEditingController();
  final country = TextEditingController();

  // Observable for refreshing data, e.g., in a list view
  RxBool refreshData = true.obs;
  // Observable for the currently selected address
  final Rx<AddressModel> selectedAddress = AddressModel.empty().obs;
  // Repository for address-related database operations
  final addressRepository = Get.put(AddressRepository()); // Assuming AddressRepository is correctly set up with GetX


  /// Fetch all user addresses from the repository
  Future<List<AddressModel>> allUserAddresses() async {
    try {
      final addresses = await addressRepository.fetchUserAddresses();
      // Attempt to find a selected address, otherwise use an empty model
      selectedAddress.value = addresses.firstWhere(
            (element) => element.selectedAddress,
        orElse: () => AddressModel.empty(), // Return empty if no address is marked as selected
      );
      return addresses;
    } catch (e) {
      NLoaders.errorSnackBar(title: 'Error Fetching Addresses', message: e.toString());
      return []; // Return an empty list on error
    }
  }

  /// Update the selected address in the database and locally
  Future<void> selectAddress(AddressModel newSelectedAddress) async {
    try {
      // If there was a previously selected address, unmark it
      if (selectedAddress.value.id.isNotEmpty) {
        await addressRepository.updateSelectedField(selectedAddress.value.id, false);
      }

      // Mark the new address as selected and update local state
      newSelectedAddress.selectedAddress = true;
      selectedAddress.value = newSelectedAddress;

      // Update the new address as selected in the database
      await addressRepository.updateSelectedField(newSelectedAddress.id, true);
      refreshData.toggle(); // Trigger UI refresh if needed
    } catch (e) {
      NLoaders.errorSnackBar(title: 'Error Selecting Address', message: e.toString());
    }
  }

  /// Add a new address after validating the form
  Future<void> addNewAddresses(GlobalKey<FormState> formKey) async { // Accept formKey as parameter
    try {
      // Start full screen loader
      NFullScreenLoader.openLoadingDialog('Storing Address...', NImage.docerAnimation);

      // Check internet connectivity
      final isConnected = await NetworkManager.instance.isConnected();
      if (!isConnected) {
        NFullScreenLoader.stopLoading(); // Stop loader before returning
        NLoaders.warningSnackBar(title: 'No Internet Connection'); // Show warning
        return;
      }

      // Validate the form using the passed key
      if (formKey.currentState == null || !formKey.currentState!.validate()) {
        NFullScreenLoader.stopLoading(); // Stop loader
        return; // Exit if form is not valid
      }

      // Create AddressModel from form data
      final address = AddressModel(
        id: '', // ID will be generated by Firestore or backend
        name: name.text.trim(),
        phoneNumber: phoneNumber.text.trim(),
        street: street.text.trim(),
        city: city.text.trim(),
        state: state.text.trim(),
        postalCode: postalCode.text.trim(),
        country: country.text.trim(),
        dateTime: DateTime.now(), // Add a timestamp
        selectedAddress: true, // Automatically select the new address
      );

      // Add address to repository and get the generated ID
      final id = await addressRepository.addAddress(address);
      address.id = id; // Assign the returned ID to the local model

      // Update this new address as the selected one (this will also update DB)
      // This might be slightly redundant if addAddress also handles selection,
      // but ensures consistency. If addAddress sets selectedAddress, this might call updateSelectedField twice.
      // Consider if addAddress itself should return the full model with ID and handle selection logic.
      // For now, explicitly calling selectAddress ensures the logic is covered.
      await selectAddress(address);

      // Stop full screen loader
      NFullScreenLoader.stopLoading();

      // Show success message
      NLoaders.successSnackBar(title: 'Congratulations!', message: 'Your address has been saved successfully.');

      // Refresh data for any listening widgets
      refreshData.toggle();

      // Reset form fields using the passed key
      resetFormFields(formKey);

      // Navigate back (pop the current screen)
      // Ensure Get.context is available and not null.
      // It's generally safer to pass context if possible or use Get.back() if appropriate.
      if (Get.context != null) {
        Navigator.of(Get.context!).pop();
      }

    } catch (e) {
      NFullScreenLoader.stopLoading(); // Ensure loader stops on error
      NLoaders.errorSnackBar(title: 'Error Saving Address', message: e.toString());
    }
  }

  /// Reset all form fields and the form state
  void resetFormFields(GlobalKey<FormState> formKey) { // Accept formKey as parameter
    name.clear();
    phoneNumber.clear();
    street.clear();
    postalCode.clear();
    city.clear();
    state.clear();
    country.clear();
    formKey.currentState?.reset(); // Safely reset the form state if currentState is not null
  }

  @override
  void onInit() {
    super.onInit();
    // Optionally fetch addresses when the controller is initialized
    // allUserAddresses();
    // Or clear fields if needed
    // name.clear(); ...etc.
  }

  @override
  void onClose() {
    // Dispose TextEditControllers to free up resources
    name.dispose();
    phoneNumber.dispose();
    street.dispose();
    postalCode.dispose();
    city.dispose();
    state.dispose();
    country.dispose();
    super.onClose();
  }
}